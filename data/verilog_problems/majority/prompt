A bus is a set of signals which are grouped together conceptually (and often physically).  One way to represent a bus is with "vector", which is somewhat similar to an array in software programming languages.

We can declare a 3-bit input vector called `votes` with
<pre>
  input logic[2:0] votes
</pre>

Note that the dimension (`[2:0]`) goes after the type, and not after the signal name.  SystemVerilog also allows arrays, which are specified by putting the dimension *after* the type like you would in C/C++.  If you ever get confusing errors about your bus being only 1 bit when you were sure it was 8 bits, check that you've declared an 8-bit vector instead of an array of 8 bits!

With this declaration, you can use `votes[0]` to refer to bit 0 of `votes`, `votes[1]` for bit 1, and `votes[2]` for bit 2.  The `[2:0]` part of the declaration specifies that this is a 3-bit bus where `votes[2]` is the MSB and `votes[0]` is the LSB.
<br/>
<br/>
Complete the architecture to build a majority encoder: the output `y` is 1 if the majority (i.e., at least two) of the input bits are 1, and 0 otherwise.


